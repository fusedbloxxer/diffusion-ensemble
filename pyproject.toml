[tool.poetry]
name = "diffusion-ensemble"
version = "0.1.0"
description = "Use different diffusion algorithms and combine their outputs using another diffusion algorithm which interpolates between a latent representation of the previous results and outputs an image containing something from both the inputs."
authors = ["fusedbloxxer <voidwarden@yahoo.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "diffusion_ensemble"}]

[tool.poetry.dependencies]
python = ">=3.10,<3.12"
numpy = "^1.23.5"
matplotlib = "^3.6.2"
sklearn = "^0.0.post1"
scikit-learn = "^1.2.0"
opencv-python = "^4.6.0.66"
notebook = "^6.5.2"
diffusers = {extras = ["torch"], version = "^0.10.2"}
torch = "^1.13.0"
torchvision = "^0.14.0"
torchaudio = "^0.13.0"
pandas = "^1.5.2"
transformers = "^4.25.1"
torchviz = "^0.0.2"
omegaconf = "^2.3.0"
accelerate = "^0.15.0"
safetensors = "^0.2.7"
argparse = "^1.4.0"
einops = "^0.6.0"
pytorch-lightning = "^1.8.6"
tensorboard = "^2.11.0"
requests = "^2.28.1"
tqdm = "^4.64.1"
albumentations = "^1.3.0"
pillow = "^9.4.0"
kornia = {extras = ["x"], version = "^0.6.9"}
ftfy = "^6.1.1"
regex = "^2022.10.31"
clip = {git = "https://github.com/openai/CLIP.git"}
pyre-extensions = "0.0.23"
ninja = "^1.11.1"
xformers = "^0.0.16"

[tool.poetry.group.dev.dependencies]
jupyter = "^1.0.0"
autopep8 = "^2.0.0"
nvitop = "^0.11.0"
ninja = "^1.11.1"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
